{"data":{"site":{"siteMetadata":{"title":"摸鱼樂","author":"Jason"}},"markdownRemark":{"id":"772c7691-f594-584a-a965-6271149a916a","html":"<h2 id=\"let命令\"><a href=\"#let%E5%91%BD%E4%BB%A4\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>let命令</h2>\n<h3 id=\"基本用法\"><a href=\"#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本用法</h3>\n<p>定义：<code class=\"language-text\">let</code>用来声明变量，用法类似于<code class=\"language-text\">var</code>,但是所声明的变量，只在<code class=\"language-text\">let</code>命令所在的代码块内有效。\t</p>\n<p>语法：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\na <span class=\"token comment\">// ReferenceError: a is not defined. let声明的变量只在它所在的代码块有效</span>\nb <span class=\"token comment\">// 6</span></code></pre></div>\n<p><code class=\"language-text\">for</code>循环中使用let</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">for</code>循环中使用<code class=\"language-text\">let</code> ，声明的变量只在块级作用域内有效，变量<code class=\"language-text\">i</code>只在本轮循环中有效。</p>\n<p><code class=\"language-text\">for</code>设置循环变量的部分是一个父作用域，而循环体内部是单独的子作用域，使用<code class=\"language-text\">let</code>可以使<code class=\"language-text\">for</code>循环内部的同名变量拥有各自单独的作用域。</p>\n<h3 id=\"不存在变量提升\"><a href=\"#%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>不存在变量提升</h3>\n<p><code class=\"language-text\">var</code>命令会存在“变量提升”的现象，即变量可以在声明之前使用，值为<code class=\"language-text\">undefined</code>。</p>\n<p><code class=\"language-text\">let</code>所声明的变量一定要在声明后使用，否则报错。</p>\n<h3 id=\"暂时性死区\"><a href=\"#%E6%9A%82%E6%97%B6%E6%80%A7%E6%AD%BB%E5%8C%BA\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>暂时性死区</h3>\n<p>原因：ES6明确规定，如果区块中存在<code class=\"language-text\">let</code>和<code class=\"language-text\">const</code>命令，该区块对声明的变量，会在一开始形成封闭作用域，只要在声明之前使用变量，就会报错。</p>\n<p>定义：在代码块内，使用<code class=\"language-text\">let</code>声明变量之前，该变量无法被使用。在语法上称为“暂时性死区”（temporal dead zone，TDZ）</p>\n<p>目的：ES6 规定暂时性死区和<code class=\"language-text\">let</code>、<code class=\"language-text\">const</code>语句不出现变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。</p>\n<p>本质：只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到变量被声明的代码出现，才可以获取和使用该变量。</p>\n<p>“暂时性死区”意味着<code class=\"language-text\">typeof</code>不再是一个百分之百安全的操作。</p>\n<h3 id=\"不允许重复声明\"><a href=\"#%E4%B8%8D%E5%85%81%E8%AE%B8%E9%87%8D%E5%A4%8D%E5%A3%B0%E6%98%8E\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>不允许重复声明</h3>\n<p><code class=\"language-text\">let</code>不允许在相同作用域内，重复声明同一个变量，会报错。</p>\n<h2 id=\"块级作用域\"><a href=\"#%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>块级作用域</h2>\n<h3 id=\"es6的块级作用域\"><a href=\"#es6%E7%9A%84%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES6的块级作用域</h3>\n<p>Why：ES5只有全局作用域和函数作用域，没有块级作用域，这会带来很多问题。</p>\n<p> \t1. 内层变量可能会覆盖外层变量\n2. 用来计数的循环变量泄露为全局变量 </p>\n<p>ES6允许块级作用域任意嵌套，外层作用域无法读取内层作用域的变量，内层作用域可以定义外层作用域的同名变量，它的出现使得立即执行函数表达式（IIFE）不再必要。</p>\n<h3 id=\"块级作用域与函数声明\"><a href=\"#%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>块级作用域与函数声明</h3>\n<p>ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。</p>\n<p>ES6 引入了块级作用域，明确允许在块级作用域之中声明函数。ES6 规定，块级作用域之中，函数声明语句的行为类似于<code class=\"language-text\">let</code>，在块级作用域之外不可引用。</p>\n<h2 id=\"const命令\"><a href=\"#const%E5%91%BD%E4%BB%A4\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>const命令</h2>\n<h3 id=\"基本用法-1\"><a href=\"#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本用法</h3>\n<p><code class=\"language-text\">const</code>声明一个只读变量。一旦声明，常量的值就不能改变。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">PI</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.1415</span>\n<span class=\"token constant\">PI</span> <span class=\"token comment\">// 3.1415</span>\n<span class=\"token constant\">PI</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token comment\">// TypeError: Assignment to constant variable.</span></code></pre></div>\n<p><code class=\"language-text\">const</code>一旦声明变量就需要立即初始化，给其赋值。</p>\n<p><code class=\"language-text\">const</code>作用域与<code class=\"language-text\">let</code>相同，只在声明所在的块级作用域。</p>\n<p><code class=\"language-text\">const</code>命令声明的变量也不会提升，也存在暂时性死区，不可重复声明。</p>\n<h3 id=\"本质\"><a href=\"#%E6%9C%AC%E8%B4%A8\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>本质</h3>\n<p><code class=\"language-text\">const</code>实际上保证的，并不是变量的值不变，而是变量指向的那个内存地址所保存的数据不变。对于基本数据数据类型，值就保存在变量指向的那个内存地址，因此等同于常量。对于引用数据类型，变量指向的内存地址，保存的只是一个指向实际数据的指针。</p>\n<p>可使用<code class=\"language-text\">Object.freeze</code>方法将对象冻结。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'jason'</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token punctuation\">:</span> <span class=\"token number\">18</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 以下代码，常规模式下不起作用，严格模式下报错</span>\nperson<span class=\"token punctuation\">.</span>tel <span class=\"token operator\">=</span> <span class=\"token string\">'186'</span></code></pre></div>\n<h2 id=\"顶层对象的属性\"><a href=\"#%E9%A1%B6%E5%B1%82%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>顶层对象的属性</h2>\n<p>顶层对象，在浏览器环境指的是<code class=\"language-text\">window</code>对象，在 Node 指的是<code class=\"language-text\">global</code>对象。ES5 之中，顶层对象的属性与全局变量是等价的。</p>\n<p>ES6 为了改变这一点，一方面规定，为了保持兼容性，<code class=\"language-text\">var</code>命令和<code class=\"language-text\">function</code>命令声明的全局变量，依旧是顶层对象的属性；另一方面规定，<code class=\"language-text\">let</code>命令、<code class=\"language-text\">const</code>命令、<code class=\"language-text\">class</code>命令声明的全局变量，不属于顶层对象的属性。也就是说，从 ES6 开始，全局变量将逐步与顶层对象的属性脱钩。</p>\n<h2 id=\"global对象\"><a href=\"#global%E5%AF%B9%E8%B1%A1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>global对象</h2>\n<p>现在有一个<a href=\"https://github.com/tc39/proposal-global\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">提案</a>，在语言标准的层面，引入<code class=\"language-text\">global</code>作为顶层对象。也就是说，在所有环境下，<code class=\"language-text\">global</code>都是存在的，都可以从它拿到顶层对象。</p>\n<p>垫片库<a href=\"https://github.com/ljharb/System.global\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">system.global</code></a>模拟了这个提案，可以在所有环境拿到<code class=\"language-text\">global</code>。 </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 保证各种环境中，global对象都存在的</span>\n<span class=\"token keyword\">import</span> shim <span class=\"token keyword\">from</span> <span class=\"token string\">'system.global/shim'</span><span class=\"token punctuation\">;</span> <span class=\"token function\">shim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 将顶层对象放入变量global</span>\n<span class=\"token keyword\">import</span> getGlobal <span class=\"token keyword\">from</span> <span class=\"token string\">'system.global'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> global <span class=\"token operator\">=</span> <span class=\"token function\">getGlobal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","timeToRead":3,"frontmatter":{"title":"let和const命令","date":"January 15, 2018","spoiler":"es6中的声明变量"},"fields":{"slug":"/es6-variable/let和const命令/","langKey":"en"}}},"pageContext":{"slug":"/es6-variable/let和const命令/","previous":null,"next":{"fields":{"slug":"/es6-string/字符串/","langKey":"en","directoryName":"es6-string"},"frontmatter":{"title":"字符串"}}}}